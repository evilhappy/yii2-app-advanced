<?php

namespace backend\controllers;

use Yii;
use common\libs\Tools;

class BaseController extends \yii\web\Controller
{

    private $status = SIGN_STATUS;
    public $member_id = 0;
    public $source = 0;
    public $version = 0;

    public function __construct($id, $module, $config = [])
    {
        parent::__construct($id, $module, $config);
        //系统维护
        if (SYSTEM_REST) {
            echo Tools::result('888', '', '系统维护中');
            exit;
        }
        //请求地址
        //$requestUrl = $_SERVER['REQUEST_URI'];
        $requestUrl = Yii::$app->getRequest()->pathInfo;
        //请求域名
//        $domainUrl = $_SERVER['SERVER_NAME'];
        if (isset($_GET)) {
            $this->_htmlPurifier($_GET);
        }
        if (isset($_POST)) {
            $this->_htmlPurifier($_POST);
        }
        Yii::$app->logger->log('info', ['url' => Yii::$app->getRequest()->url, 'post' => $_POST, 'get' => $_GET, 'raw' => Yii::$app->getRequest()->getRawBody()], 'request');
        if (!in_array($requestUrl, Yii::$app->params['noCheckLoginApi'])) {
            $this->checkLogin();
        }
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->checkVersion();//获取版本号
        $this->getMemberID();//获取用户ID
    }

    /**
     * 获取用户ID
     * @return array|int|mixed
     */
    public function getMemberID()
    {
        $this->member_id = Tools::getRequest('member_id');
        return $this->member_id;
    }

    /**
     * 根据版本号version校验
     * @return array|int|mixed
     */
    public function checkVersion()
    {
        $this->source = Tools::getRequest('source', 0);
        $this->version = Tools::getRequest('version');
        return $this->version;
    }

    /**
     * 登录校验token
     */
    public function checkLogin()
    {
        if (CHECK_LOGIN) {
            if (empty($this->member_id) || $this->member_id <= 0) {
                echo Tools::result(900);
                exit;
            }
            //version==1不校验sign
            if ($this->version == OLD_VERSION) return true;
            $token = Tools::getRequest('token');
            if (empty($token)) {
                echo Tools::result(900);
                exit;
            }

            $memberService = new MemberService();
            $result = $memberService->checkToken($this->member_id, $token);
            if ($result['code'] != SUCCESS) {
                echo Tools::result($result['code']);
                exit;
            }
        } else {
            return true;
        }
    }

    /**
     * 过滤html 标签
     * @param $array 输入内容 e.g. $_GET $_POST
     * @return mixed 过滤后的内容
     */
    private function _htmlPurifier(&$array)
    {
        $purifier = new \yii\helpers\HtmlPurifier;
        while (list($key, $var) = each($array)) {
            if (is_string($var)) {
                $content = $purifier->process($var);
                $array [$key] = $content;
            }
            if (is_array($var)) {
                $array [$key] = $this->_htmlPurifier($var);
            }
        }
        return $array;
    }

    /**
     * key
     * sign
     * channel
     */
    public function beforeaction($action)
    {

        if (!$this->status) {
            return true;
        }
        //version==1不校验sign
        if ($this->version == OLD_VERSION) return true;
        $params = array();
        $verifyStr = '';
        $sign = '';
        //判断传参方式
        $request = Yii::$app->request;
        if ($request->isGet) {
            $params = Yii::$app->request->get();
        }
        if ($request->isPost || $request->isPut || $request->isDelete) {
            $params = Yii::$app->request->post();
        }
        //微信支付不需要sign
        $refer = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '';
        if (in_array($refer, Yii::$app->params['noNeedSignApi'])) {
            return true;
        }
        if (strpos($refer, 'wechat/wechat') !== false
            || strpos($refer, 'xmi-callback') !== false
            || strpos($refer, 'dumi-callback') !== false) {
            return true;
        }
        //判断参数合法性
        if (empty($params['sign'])) {
            echo Tools::result('40001', 'sign不能为空');
            return false;
        } else {
            $sign = $params['sign'];
        }
        //验证sign是否合法
        unset($params['sign']);
        ksort($params);
        foreach ($params as $k => $v) {
            //票据sign验证特殊处理
            if ($k == 'receipt') {
                $v = str_replace(" ", '+', $v);
            }
            $verifyStr .= $k . htmlspecialchars_decode($v);
        }
        Yii::$app->logger->log('debug', $params, 'sign');
        $verifySign = hash('sha256', $verifyStr . SIGN_KEY);  //加密方式处理为哈希
        if ($sign != $verifySign) {
            \Yii::$app->logger->log('error', [$verifyStr . SIGN_KEY, $verifySign, $sign]);
            echo Tools::result('40003', 'sign验证失败');
            return false;
        }
        return true;
    }

    /**
     * 登录校验订阅时间
     */
    public function checkExpire_time()
    {
        if ($this->version == OLD_VERSION) return true;
        //获取用户来源 source 1 ipad,2 phone
        if ($this->source == 2) {
            //审核期间不校验过期时间
            if ($this->version == PHONE_VERSION) return true;
        } else {
            //审核期间不校验过期时间
            if ($this->version == VERSION) return true;
        }
        $member_id = $this->member_id;
        // 扫码过滤
        $params['member_id'] = $member_id;
        if ($member_id) {
            $memberService = new MemberService();
            $result = $memberService->checkExpireTime($params);
            if ($result['code'] != SUCCESS) {
                echo Tools::result($result['code']);
                exit;
            }
        }
    }

    /**
     * 获取service版本
     * @return int
     */
    public function getServiceVersion()
    {
        $versionConf = Yii::$app->params['VersionConf'];
        $source = ($this->source == 2 || $this->source == 6) ? 2 : $this->source;
        $serviceVersion = 1;
        $serviceVersionData = empty($versionConf[$source]) ? [] : $versionConf[$source];
        if (empty($serviceVersionData)) {
            return $serviceVersion;
        }
        $versionTmp = [];
        foreach ($serviceVersionData as $k => $v) {
            //向下兼容
            if ($this->version >= $v) {
                $versionTmp[] = $k;
            }
        }
        //获取最高service版本
        $serviceVersion = empty($versionTmp) ? 1 : max($versionTmp);
        unset($serviceVersionData);
        unset($versionTmp);
//        $serviceVersion = isset($versionConf[$source.'_'.$this->version])?$versionConf[$source.'_'.$this->version]:1;
        return $serviceVersion;
    }
}